// https://leetcode.com/problems/minesweeper/
// Using depth first search

class Solution {

    public char[][] updateBoard(char[][] board, int[] click) {

        int a = click[0];   int b = click[1];
        // #1 Mine is reaveled. Game is over. 
        if (board[a][b] == 'M') {
            board[a][b] = 'X';
            return board;
        }
        // Run DFS. Store count of a box with board2.
        int[][] board2 = new int[board.length][board[0].length];
        dfs(board,a,b,board2);
        return board;
    }
    public void dfs(char[][] board,int i,int j,int[][] board2)    {
        if (i<0 || j<0 || i>=board.length || j>=board[0].length || board[i][j]!='E')    return;
        adjacent(board,i,j,board2);
        if (board2[i][j] == 0)  board[i][j] = 'B';
        else return;
        // Run DFS in all 8 directions.
        dfs(board,i-1,j-1,board2);
        dfs(board,i-1,j,board2);
        dfs(board,i-1,j+1,board2);
        
        dfs(board,i,j-1,board2);
        dfs(board,i,j+1,board2);

        dfs(board,i+1,j-1,board2);
        dfs(board,i+1,j,board2);
        dfs(board,i+1,j+1,board2);
    }
    int[][] dir = new int[][]{{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
    public void adjacent(char[][] board,int i,int j,int[][] board2)  {
        // Check if a box adjacent to i,j contains a mine.
        for (int[] d : dir) {
            int x = i+d[0];
            int y = j+d[1];
            if (x>=0 && y>=0 && x<board.length && y<board[0].length && board[x][y] == 'M')   {
                board2[i][j] += 1;
                board[i][j] = (char)(board2[i][j]+'0');
            }
        }
    }
}


// My solution: https://leetcode.com/problems/minesweeper/discuss/2167853/java-dfs-with-explanation